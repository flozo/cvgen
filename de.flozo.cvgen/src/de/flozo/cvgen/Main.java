package de.flozo.cvgen;

import de.flozo.common.dto.appearance.*;
import de.flozo.common.dto.content.*;
import de.flozo.common.dto.latex.DocumentClass;
import de.flozo.common.dto.latex.LatexPackage;
import de.flozo.common.dto.latex.TikzLibrary;
import de.flozo.db.*;
import de.flozo.latex.assembly.LayerList;
import de.flozo.latex.assembly.PackageList;
import de.flozo.latex.assembly.Preamble;
import de.flozo.latex.core.*;

import java.sql.Connection;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;


public class Main {

    // constants
    public static final String APPLICATION_NAME = "cvgen";
    public static final String VERSION_NUMBER = "0.9";
    public static final String VERSION_DATE = "2022-09-24";

    public static final String REPO_URL = String.format("https://github.com/flozo/%1$s",
            APPLICATION_NAME);
    public static final String VERSION_INFO_LATEX_HEADER = String.format("%% =====  LaTeX code generated by %1$s v%2$s (%3$s)\n%% =====  %1$s by flozo (%4$s)",
            APPLICATION_NAME, VERSION_NUMBER, VERSION_DATE, REPO_URL);
    public static final String VERSION_INFO_PDF_META_DATA = String.format("%1$s v%2$s (%3$s); visit %4$s",
            APPLICATION_NAME, VERSION_NUMBER, VERSION_DATE, REPO_URL);
    public static final String HOME_DIRECTORY = System.getProperty("user.home");


    public static final String DEFAULT_TARGET_DIRECTORY = "/tmp";
    public static final String DEFAULT_TARGET_FILENAME = "test_output.tex";
    public static final boolean DEFAULT_RUN_PDFLATEX = true;
    public static final boolean DEFAULT_OPEN_PDF = true;


    public static void main(String[] args) {

        Datasource datasource = Datasource.INSTANCE;
        Connection connection = datasource.getConnection();

        try {

            // Letter DAOs
            LetterContentDAO letterContentDAO = new LetterContentDAOImpl(datasource, connection);
            ElementDAO elementDAO = new ElementDAOImpl(datasource, connection);
            EnclosureDAO enclosureDAO = new EnclosureDAOImpl(datasource, connection);
            TextItemDAO textItemDAO = new TextItemDAOImpl(datasource, connection);
            EmbeddedFileDAO embeddedFileDAO = new EmbeddedFileDAOImpl(datasource, connection);
            PageDAO pageDAO = new PageDAOImpl(datasource, connection);
            LineDAO lineDAO = new LineDAOImpl(datasource, connection);
            IconDAO iconDAO = new IconDAOImpl(datasource, connection);

            // Letter content
            LetterContent letterContent = letterContentDAO.get(3);
            List<Enclosure> enclosureList = enclosureDAO.getAllIncluded();
            String backaddressSeparator = textItemDAO.get("backaddress_separator").getValue();
            EmbeddedFile signatureFile = embeddedFileDAO.get("signature");
            LetterTextFieldContent letterTextFieldContent = new LetterTextFieldContent(
                    letterContent, enclosureList, backaddressSeparator, signatureFile
            );
            Letter letter = new Letter(letterTextFieldContent, elementDAO);
            DocumentPage motivationalLetter = letter.createLetter(pageDAO, lineDAO, iconDAO);

            // CV DAOs
            ItemizeStyleDAO itemizeStyleDAO = new ItemizeStyleDAOImpl(datasource, connection);
            TimelineItemDAO timelineItemDAO = new TimelineItemDAOImpl(datasource, connection);
            SkillDAO skillDAO = new SkillDAOImpl(datasource, connection);
            RectangleDAO rectangleDAO = new RectangleDAOImpl(datasource, connection);

            EmbeddedFile photoFile = embeddedFileDAO.get("photo");
            CurriculumVitae curriculumVitae = new CurriculumVitae(elementDAO, timelineItemDAO, textItemDAO, itemizeStyleDAO, iconDAO, letterTextFieldContent, photoFile, skillDAO);

            DocumentElement headline = letter.getHeadline();
            DocumentPage cv1 = curriculumVitae.createCVPage1(pageDAO, lineDAO, rectangleDAO, headline);
            DocumentPage cv2 = curriculumVitae.createCVPage2(pageDAO, lineDAO, rectangleDAO, headline);


            // LaTeX
            DocumentClassDAO documentClassDAO = new DocumentClassDAOImpl(datasource, connection);
            LatexPackageDAO latexPackageDAO = new LatexPackageDAOImpl(datasource, connection);
            TikzLibraryDAO tikzLibraryDAO = new TikzLibraryDAOImpl(datasource, connection);

            DocumentClass documentClass = documentClassDAO.getAllIncluded().get(0);
            List<LatexPackage> latexPackages = latexPackageDAO.getAllIncluded();
            PackageList packageList = new PackageList(latexPackages);
            List<String> tikzLibraries = tikzLibraryDAO.getAll().stream().map(TikzLibrary::getName).collect(Collectors.toList());

            String pdfSubject = "Application";
            String pdfTitle = "Application";
            List<String> hyperOptions = new ArrayList<>();
            hyperOptions.add("colorlinks=true");
            hyperOptions.add("urlcolor=Blues-M");
            hyperOptions.add(String.format("pdftitle={%s}", pdfTitle));
            hyperOptions.add(String.format("pdfsubject={%s}", pdfSubject));
            hyperOptions.add(String.format("pdfauthor={%s}", letterTextFieldContent.getSenderNameLine().getInline()));
            hyperOptions.add(String.format("pdfdate={%s}", LocalDate.now()));
            hyperOptions.add(String.format("pdfproducer={%s}", VERSION_INFO_PDF_META_DATA));
            hyperOptions.add(String.format("pdfcontactcity={%s}", letterTextFieldContent.getSender().getCity()));
            hyperOptions.add(String.format("pdfcontactcountry={%s}", letterTextFieldContent.getSender().getCountry()));
            hyperOptions.add(String.format("pdfcontactemail={%s}", letterTextFieldContent.getSender().getEMailAddress()));

            Preamble preamble = Preamble.create(documentClass, packageList, tikzLibraries, hyperOptions);

            LayerDAO layerDAO = new LayerDAOImpl(datasource, connection);
            List<String> layers = layerDAO.getAll().stream()
                    .map(Layer::getName)
                    .collect(Collectors.toList());
            LayerList layerList = new LayerList.Builder(layers).build();
            List<String> layerDeclarationBlock = layerList.getLayerCode();

            EnclosureCode enclosureCode = new EnclosureCode(enclosureList);

            ExpressionList documentBody = new FormattedExpressionList.Builder()
                    .append(layerDeclarationBlock)
                    .append(motivationalLetter.getCode())
                    .append(cv1.getCode())
                    .append(cv2.getCode())
                    .append(enclosureCode.getCode())
                    .build();

            Environment document = new Environment.Builder(EnvironmentName.DOCUMENT)
                    .body(documentBody.getBlock())
                    .build();

            LatexCode laTeXCode = new LatexCode(VERSION_INFO_LATEX_HEADER, preamble, document);

            OutputFile outputFile = new OutputFile(DEFAULT_TARGET_DIRECTORY, DEFAULT_TARGET_FILENAME, laTeXCode.getCode());
            if (outputFile.create(DEFAULT_RUN_PDFLATEX, DEFAULT_OPEN_PDF)) {
                System.out.println("[output] Done!");
            } else {
                System.out.println("[output] Something went wrong!");
            }

        } finally {
            datasource.closeConnection();
        }
    }

}
