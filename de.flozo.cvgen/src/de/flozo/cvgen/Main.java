package de.flozo.cvgen;

import de.flozo.common.dto.appearance.Layer;
import de.flozo.common.dto.appearance.Line;
import de.flozo.common.dto.appearance.Page;
import de.flozo.common.dto.content.Address;
import de.flozo.common.dto.content.Enclosure;
import de.flozo.common.dto.content.LetterContent;
import de.flozo.common.dto.latex.DocumentClass;
import de.flozo.common.dto.latex.LatexPackage;
import de.flozo.common.dto.latex.TikzLibrary;
import de.flozo.db.*;
import de.flozo.latex.assembly.LayerList;
import de.flozo.latex.assembly.PackageList;
import de.flozo.latex.assembly.Preamble;
import de.flozo.latex.core.*;

import java.sql.Connection;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;


public class Main {

    // constants
    public static final String APPLICATION_NAME = "cvgen";
    public static final String VERSION_NUMBER = "0.2";
    public static final String VERSION_DATE = "2022-07-30";

    public static final String REPO_URL = String.format("https://github.com/flozo/%1$s",
            APPLICATION_NAME);
    public static final String VERSION_INFO_LATEX_HEADER = String.format("%% =====  LaTeX code generated by %1$s v%2$s (%3$s)\n%% =====  %1$s by flozo (%4$s)",
            APPLICATION_NAME, VERSION_NUMBER, VERSION_DATE, REPO_URL);
    public static final String VERSION_INFO_PDF_META_DATA = String.format("%1$s v%2$s (%3$s); visit %4$s",
            APPLICATION_NAME, VERSION_NUMBER, VERSION_DATE, REPO_URL);


    public static void main(String[] args) {


        Datasource2 datasource2 = Datasource2.INSTANCE;
        Connection connection = datasource2.getConnection();

        try {

            LetterContentDAO letterContentDAO = new LetterContentDAOImpl(datasource2, connection);
            LetterContent letterContent = letterContentDAO.get("test");


            Address receiver = letterContent.getReceiver();
            Address sender = letterContent.getSender();

            ContentElement.Builder receiverNameLineBuilder = new ContentElement.Builder();
            if (receiver.getCompany() != null && !receiver.getCompany().isBlank()) {
                receiverNameLineBuilder.addComponent(receiver.getCompany());
            } else {
                receiverNameLineBuilder
                        .addComponent(receiver.getFirstName())
                        .addComponent(receiver.getLastName());
            }
            ContentElement receiverNameLine = receiverNameLineBuilder.inlineDelimiter(Delimiter.SPACE).build();
            ContentElement receiverStreetLine = new ContentElement.Builder()
                    .addComponent(receiver.getStreet())
                    .addComponent(receiver.getHouseNumber())
                    .inlineDelimiter(Delimiter.SPACE)
                    .build();
            ContentElement receiverCityLine = new ContentElement.Builder()
                    .addComponent(receiver.getPostalCode())
                    .addComponent(receiver.getCity())
                    .inlineDelimiter(Delimiter.SPACE)
                    .build();
            ContentElement addressFieldContent = new ContentElement.Builder()
                    .addComponent(receiverNameLine.getContentElement())
                    .addComponent(receiverStreetLine.getContentElement())
                    .addComponent(receiverCityLine.getContentElement())
                    .multilineContent(true)
                    .build();


            ContentElement senderNameLine = new ContentElement.Builder()
                    .addComponent(sender.getFirstName())
                    .addComponent(sender.getLastName())
                    .inlineDelimiter(Delimiter.SPACE)
                    .build();

            ContentElement senderStreetLine = new ContentElement.Builder()
                    .addComponent(sender.getStreet())
                    .addComponent(sender.getHouseNumber())
                    .inlineDelimiter(Delimiter.SPACE)
                    .build();
            ContentElement senderCityLine = new ContentElement.Builder()
                    .addComponent(sender.getPostalCode())
                    .addComponent(sender.getCity())
                    .inlineDelimiter(Delimiter.SPACE)
                    .build();

            ContentElement backaddressFieldContent = new ContentElement.Builder()
                    .addComponent(senderNameLine.getContentElement())
                    .addComponent(senderStreetLine.getContentElement())
                    .addComponent(senderCityLine.getContentElement())
                    .inlineDelimiter("\\hspace{8pt}$\\bullet$\\hspace{8pt}")
                    .build();

            ContentElement dateFieldContent = new ContentElement.Builder()
                    .addComponent(sender.getCity())
                    .addComponent(letterContent.getDate())
                    .insertSpaceAfterDelimiter(true)
                    .inlineDelimiter(Delimiter.COMMA)
                    .build();

            ContentElement subjectFieldContent = new ContentElement.Builder()
                    .addComponent(letterContent.getSubject())
                    .build();

            ContentElement bodyContent = new ContentElement.Builder()
                    .addComponent(letterContent.getBodyText())
                    .build();

            EnclosureDAO enclosureDAO = new EnclosureDAOImpl(datasource2, connection);
            List<Enclosure> enclosureList = enclosureDAO.getAllIncluded();

            ContentElement enclosures = new ContentElement.Builder()
                    .addComponents(enclosureList.stream().map(Enclosure::getCaption).collect(Collectors.toList()))
                    .inlineDelimiter(Delimiter.COMMA)
                    .insertSpaceAfterDelimiter(true)
                    .build();
            ContentElement enclosureLine = new ContentElement.Builder()
                    .addComponent("Enclosures: ")
                    .addComponent(enclosures.getContentElement())
                    .build();

            ElementDAO elementDAO = new ElementDAOImpl(datasource2, connection);

            DocumentElement addressField = new DocumentElement("receiver_address", addressFieldContent, elementDAO.get("address"));
            DocumentElement backaddressField = new DocumentElement("backaddress", backaddressFieldContent, elementDAO.get("backaddress"));
            DocumentElement dateField = new DocumentElement("letter_date", dateFieldContent, elementDAO.get("date"));
            DocumentElement subjectField = new DocumentElement("letter_subject", subjectFieldContent, elementDAO.get("subject"));
            DocumentElement bodyField = new DocumentElement("letter_body", bodyContent, elementDAO.get("body"));
            DocumentElement enclosureTagLine = new DocumentElement("enclosures", enclosureLine, elementDAO.get("enclosures"));

            System.out.println(elementDAO.get("body"));

            PageDAO pageDAO = new PageDAOImpl(datasource2, connection);
            Page letterPage = pageDAO.get("cv_motivational_letter");

            LineDAO lineDAO = new LineDAOImpl(datasource2, connection);
            List<Line> lineList = lineDAO.getAll();

            DocumentPage motivationalLetter = new DocumentPage.Builder("letter", letterPage)
                    .addElement(addressField, backaddressField, dateField, subjectField, bodyField, enclosureTagLine)
                    .addLine(lineList)
                    .build();

//            DocumentPage motivationalLetter = new DocumentPage(letterPage, addressField, backaddressField,
//                    dateField, subjectField, bodyField, enclosureTagLine);

            DocumentClassDAO documentClassDAO = new DocumentClassDAOImpl(datasource2, connection);
            DocumentClass documentClass = documentClassDAO.getAllIncluded().get(0);

            LatexPackageDAO latexPackageDAO = new LatexPackageDAOImpl(datasource2, connection);
            List<LatexPackage> latexPackages = latexPackageDAO.getAllIncluded();
            PackageList packageList = new PackageList(latexPackages);

            TikzLibraryDAO tikzLibraryDAO = new TikzLibraryDAOImpl(datasource2, connection);
            List<String> tikzLibraries = tikzLibraryDAO.getAll().stream().map(TikzLibrary::getName).collect(Collectors.toList());

            String pdfSubject = "Application";
            String pdfTitle = "Application";
            List<String> hyperOptions = new ArrayList<>();
            hyperOptions.add("colorlinks=true");
            hyperOptions.add("urlcolor=Blues-K");
            hyperOptions.add(String.format("pdftitle={%s}", pdfTitle));
            hyperOptions.add(String.format("pdfsubject={%s}", pdfSubject));
            hyperOptions.add(String.format("pdfauthor={%s}", senderNameLine.getContentElement()));
            hyperOptions.add(String.format("pdfdate={%s}", LocalDate.now()));
            hyperOptions.add(String.format("pdfproducer={%s}", VERSION_INFO_PDF_META_DATA));
            hyperOptions.add(String.format("pdfcontactcity={%s}", sender.getCity()));
            hyperOptions.add(String.format("pdfcontactcountry={%s}", sender.getCountry()));
            hyperOptions.add(String.format("pdfcontactemail={%s}", sender.getEMailAddress()));


            Preamble preamble = Preamble.create(documentClass, packageList, tikzLibraries, hyperOptions);

            LayerDAO layerDAO = new LayerDAOImpl(datasource2, connection);
            List<String> layers = layerDAO.getAll().stream().map(Layer::getName).collect(Collectors.toList());
            LayerList layerList = new LayerList.Builder(layers).build();
            List<String> layerDeclarationBlock = layerList.getLayerCode();


            ExpressionList documentBody = new FormattedExpressionList.Builder()
                    .append(layerDeclarationBlock)
                    .append(motivationalLetter.getCode())
                    .build();

            Environment document = new Environment.Builder(EnvironmentName.DOCUMENT)
                    .body(documentBody.getBlock())
                    .build();


            LaTeXCode laTeXCode = new LaTeXCode(VERSION_INFO_LATEX_HEADER, preamble, document);

//            for (String line : laTeXCode.getCode()) {
//                System.out.println(line);
//            }

            String fileName = "test_output.tex";
            String directory = "/tmp";

            OutputFile outputFile = new OutputFile(directory, fileName, laTeXCode.getCode());
            if (outputFile.create(true, true)) {
                System.out.println("[output] Done!");
            } else {
                System.out.println("[output] Something went wrong!");
            }


        } finally {
            datasource2.closeConnection();
        }

    }
}
